// The oryx world tiles have a number of different sets of
// tiles that vary together, we call them a Biome

import _ = require("lodash")

export enum Structure {
    Wall = 0,
    WallCracked,
    WallVeryCracked,
    Floor,
    FloorIndent,
    FloorCracked,
    FloorPattern,
    UpStair,
    DownStair,
    WallRaised,
    WallEast,
    WallEastWest,
    WallWest,
    WallSouth,
    WallNorthSouth,
    WallNorth,
    WallEastSouth,
    WallSouthWest,
    WallNorthEast,
    WallNorthWest,
    WallIntersection,
    WallEastSouthWest,
    WallNorthSouthWest,
    WallNorthEastSouth,
    WallNorthEastWest,
    WallNorthSouthCracked,
    WallEastWestCracked
}

// Starts 28 to 41
enum FurnitureEnum {
    Grave = 0,
    GraveCracked,
    GraveDestroyed,
    Bones1,
    Bones2,
    Bones3,
    Bones4,
    Bones5,
    Bones6,
    Bones7,
    Fire1,
    Fire2,
    Torch1,
    Torch2,
    WebNorthWest,
    WebNorthEast,
    WebEastSouth,
    WebSouthWest,
    WebIntersection1,
    WebIntersection2,
    BloodPool,
    BloodSpatter2,
    BloodSpatter3,
    BloodSpatter4,
    AcidPool,
    AcidSpatter,
    Brazier1,
    Brazier2,
    DoorClosed,
    DoorOpen,
    DoorBarred,
    DoorNoHandle,
    DoorBarredBack,
    DoorBroken,
    DoorAjar,
    MetalDoor,
    MetalDoorOpen,
    IcyDoor,
    IcyDoorOpen,
    DoorBoarded,
    DoorBoardedBroken,
    DoorPortal,
    Porticullis,
    PorticullisOpen,
    DoorGlass,
    Chest,
    ChestOpenGold,
    ChestOpenSpikes,
    ChestOpen,
    Coffin,
    CoffinOpen,
    CoffinAjar,
    Barrel,
    BarrelBroken,
    Bucket,
    Bucket2,
    Trapdoor,
    TrapdoorOpen,
    Bookshelf,
    BookshelfEmpty,
    Table,
    TableWithPaper,
    ChairSouth,
    ThroneSouth,
    SwordRack,
    SwordRack2,
    ChestSouth,
    ChestSouthOpenGold,
    Crate,
    CrateOpen,
    Unused,
    Unused1,
    Cauldron,
    Cauldron2,
    StatueMage,
    StatueBroken,
    StatueArcher,
    StatueFighter,
    VasePillar,
    VasePillarCracked,
    VasePillarBroken,
    Vase,
    VaseCracked,
    VaseBroken,
    Spikes,
    AlchemyCircle,
    AlchemyCirclePentagram,
    AlchemyCircleSkull,
    BearTrap,
    Chute,
    Grate,
    Grate2,
    VaseBlue,
    VaseBlueCracked,
    VaseBlueBroken,
    VaseGreen,
    VaseGreenCracked,
    VaseGreenBroken,
    Fountain,
    FountainOff,
    TombstoneGem,
    TombstoneSnakes,
    TombstoneHead,
    TombstoneRing,
    TombstoneCross,
    TombstoneBroken,
    VaseRed,
    VaseRedCracked,
    VaseRedBroken,
    VaseBrown,
    VaseBrownCracked,
    VaseBrownBroken,
    Cage,
    MetalCage,
    Cage2,
    MetalCage2,
    WellSite,
    Well,
    Hay,
    HayGrey,
    BookRed,
    BookBlack,
    BookBlue,
    BookGreen,
    Skull,
    SkullYak,
    TableEast,
    TableEastWest,
    TableWest,
    TableEastPlates,
    TableWestPlates,
    BenchEast,
    BenchEastWest,
    BenchWest,
    BookRed2,
    BookBlack2,
    BookBlue2,
    BookGreen2,
    Skull2,
    Ribcage,
    Moon,
    MoonBlue,
    MoonPurple,
    MoonOrange,
    MoonCracked,
    MoonBlueRings
}

function mapTileSection<T>(enumObj: T, startIndex: number, subcols: number): Record<keyof T, number> {
    const cols = 55

    const mapping: Record<string, number> = {}
    for (const key in enumObj) {
        if (_.isString(key)) {
            let num = enumObj[key] as any as number
            const subcol = num % subcols
            const row = Math.floor(num / subcols)

            const index = (cols * row) + startIndex + subcol
            mapping[key] = index
        }
    }
    return mapping as Record<keyof T, number>
}

export const Furniture = mapTileSection(FurnitureEnum, 28, 14)

// Starts 43 to 54
export enum Plants {
    Bush = 0,
    Bush2,
    LittleBushes,
    LittleBushes2,
    LittleBush,
    BushBrown,
    BushBrown2,
    LittleBushesBrown,
    LittleBushesBrown2,
    LittleBushBrown,
    Lilypads,
    Lilypad,
    FlowersThree,
    FlowersTwo,
    Flower,
    PadsFour,
    BoulderBrown,
    BoulderGrey,
    CloverStar,
    CloverStarSmall,
    PuddleBlue,
    PuddleBlueSmall,
    PuddleRed,
    PuddleRedSmall,
    CaveEntrance,
    PointyBoulderBrown,
    PointyBoulderGrey,
    PointyBoulderGrey2,
    SittingStones,
    Cactus,
    Cactus2,
    Cactus3,
    PuddleGreen,
    PuddleGreenSmall,
    PuddleBrown,
    PuddleBrownSmal,
    TreeApple,
    TreeAppleFruiting,
    TreeAppleAutumn,
    TreeAppleDead,
    TreeAppleStump,
    TreePine,
    TreePineFrosted,
    // continues
}

export enum Biome {
    Stone = 0,
    Stone2 = 1,
    Rock = 2,
    Clay,
    Inlaid,
    Jade,
    Cyan,
    Blue,
    Yellow,
    Grates,
    Metal,
    OldStone,
    Mossy,
    Dirt,
    Hedge,
    SkullHedge,
    Fences,
    SnowStone,
    SnowStone2,
    Sandstone
}

// Every second row of the creature tileset is 
// a second frame of the creature directly above
export enum CreatureSequence {
    // ROW 1
    SunPaladin = 0,
    Ranger,
    Sniper,
    Esper,
    Priest,
    Druid,
    Warrior,
    Fencer,
    Cleric,
    SunPaladin2,
    Ranger2,
    Sniper2,
    Esper2,
    Priest2,
    Druid2,
    Warrior2,
    Fencer2,
    Cleric2,

    // ROW 3
    Rogue,
    Rookie,
    Guy,
    Girl,
    Merchant,
    Chef,
    Chef2,
    Minister,
    King,
    Queen,
    Prince,
    Princess,
    Pikeman,
    Pikewoman,
    PikeHelmet,
    Pikeman2,
    Pikewoman2,
    PikeHelmet2,

    // ROW 5
    Rogue2,
    Rookie2,
    Guy2,
    Girl2,
    Merchant2,
    Shirtless,
    FunnyHat,
    Minister2,
    King2,
    Queen2,
    Prince2,
    Princess2,
    Pikeman3,
    Pikewoman3,
    PikeHelmet3,
    Pikeman4,
    Pikewoman4,
    PikeHelmet4,

    // ROW 7
    SinisterGirl,
    SinisterGuy,
    Dwarf,
    Dwarf2,
    DwarfCleric,
    DrowSaberHood,
    DrowSaber,
    DrowArcher,
    DrowMage,
    DrowPriestess,
    GelfSword,
    GelfSwordShield,
    GelfArcher,
    GelfPole,
    GelfSword2,
    GelfSwordShield2,
    GelfArcher2,
    GelfPole2,

    // ROW 9
    SnelfSword,
    SnelfSwordShield,
    SnelfArcher,
    SnelfPole,
    SnelfSword2,
    SnelfSwordShield2,
    SnelfArcher2,
    SnelfPole2,
    LizardPole,
    LizardArcher,
    LizardPoleShield,
    LizardPoleSkirt,
    LizardLeader,
    Halfling,
    HalflingHood,
    Halfling2,
    HalfingHat,
    HalflingOld,

    // ROW 11
    Werewolf,
    WerewolfYellow,
    WerewolfRed,
    WerewolfCloth,
    Brute,
    BruteGrey,
    BruteRed,
    DemonBlue,
    DemonRed,
    DemonBrown,
    Golem,
    Golem2,
    Golem3,
    GolemMagma,
    GolemBone,
    Djinn,
    EvilTree,
    Mimic,

    // ROW 13
    JellyPurple,
    JellyGreen,
    Bat,
    BatRed,
    Beholder,
    Spider,
    Spider2,
    Rat,
    Rat2,
    Cobra,
    Fly,
    Fly2,
    Wolf,
    WolfBrown,
    WolfBlack,
    Bird,
    BirdBlue,
    BirdBlack,

    // ROW 15
    GoblinSword,
    GoblinArcher,
    GoblinSwordHelmet,
    GoblinHat,
    GoblinStaff,
    DarkGoblinSword,
    DarkGoblinHelmet,
    DarkGoblinStaff,
    OgreGreen,
    OgreRed,
    OgreCream,
    OgreBrown,
    KnightRed,
    KnightBlue,
    KnightYellow,
    BeastyBrown,
    BeastyBlue,
    BeastyGrey,

    // ROW 17
    Zombie,
    ZombieHeadless,
    Skeleton,
    SkeletonArcher,
    SkeletonEquipped,
    GhostDark,
    Ghost,
    Mummy,
    MummyPriest,
    Lich,
    LichFaceless,
    LichMaster,
    VampireRed,
    VampireBlue,
    VampireLord,
    Witch,
    WitchBlue,
    WitchGreen,

    // ROW 19
    DragonRed,
    DragonPurple,
    DragonOrange,
    DragonGreen,
    Yeti,
    YetiOrange,
    Worm,
    WormOrange,
    BearOrange,
    BearBlack,
    BearWhite,
    ScorpionRed,
    ScorpionCream,
    ScorpionBlack,
    TwoHeadedOgre,
    TwoHeadedOgre2,
    Fairy,
    Imp,

    // ROW 21
    OrbThingBlue,
    OrbThingMagenta,
    Bulb,
    BulbAngry,
    BlobRed,
    BlobBlue,
    BlobGrey,
    BlobBrown,
    Eye,
    Eyes,
    ElementalRed,
    ElementalBlue,
    ElementalYellow,
    CubeBlue,
    CubeGreen,
    CubeRed,
    FireRed,
    FireBlue
}

export type TileRef = {
    tileset: string
    index: number
}

export const Creature = (() => {
    const tilesByName: Record<string, TileRef> = {}

    let offset = 0
    for (const key in CreatureSequence) {
        const creatureIndex = (CreatureSequence[key] as any) as number | string
        if (_.isString(creatureIndex)) continue

        if (creatureIndex % 18 === 0)
            offset += 18

        tilesByName[key] = { tileset: 'creatures', index: offset + creatureIndex }
    }

    return tilesByName as Record<keyof typeof CreatureSequence, TileRef>
})()